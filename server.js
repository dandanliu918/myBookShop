var http=require('http');var fs=require('fs');var url=require('url');var mime=require('mime');function readBook(callback) {   fs.readFile('./book.json','utf8',function (err,data) {       if(err || data==''){           data='[]'       }       data=JSON.parse(data);       callback(data);   })}function writeBook(data,callback) {    fs.writeFile('./book.json',JSON.stringify(data),callback)}http.createServer(function (req,res) {     var urlObj=url.parse(req.url,true);     var pathname=urlObj.pathname;     var query=urlObj.pathname;     if(pathname=='/'){         res.setHeader('content-type','text/html;charset=utf8;');         fs.createReadStream('./index.html').pipe(res);     }else if(/^\/book(\/\d+)?$/.test(pathname)){         var id=/^\/book(?:\/(\d+))?$/.exec(pathname)[1];         switch (req.method){             case 'GET':                 if(id){                     readBook(function (data) {                         var b=data.find(function (item) {                             return item.bookId==id;                         })                         res.end(JSON.stringify(b));                     })                 }else {                     readBook(function (data) {                         res.end(JSON.stringify(data));                     })                 }                 break;             case 'POST':                 //增加图书                 var str='';                 req.on('data',function (data) {                     str+=data;                 })                 req.on('end',function () {                     var b=JSON.parse(str);                     readBook(function (data) {                         b.bookId=data.length?data[data.length-1].bookId+1:1;                         data.push(b);                         writeBook(data,function () {                             res.end(JSON.stringify(b));                         })                     })                 })                 break;             case 'PUT':                 //修改图书                 var str='';                 req.on('data',function (data) {                     str+=data;                 })                 req.on('end',function () {                     var b=JSON.parse(str);                     readBook(function (data) {                         data=data.map(function (item) {                             if(item.bookId==id){                                 return b                             }                             return item;                         })                         writeBook(data,function () {                             res.end(JSON.stringify(b))                         })                     })                 })                 break;             case 'DELETE':                 if(id){                     readBook(function (data) {                          data=data.filter(function (item) {                             return item.bookId !=id;                         })                         writeBook(data,function (data) {                             res.end(JSON.stringify({}))                         })                     })                 }                 break;         }     }else {        fs.exists('.'+pathname,function (exists) {            if(exists){                res.setHeader('content-type',mime.lookup(pathname)+';charset=utf8;');                fs.createReadStream('.'+pathname).pipe(res);            }        })     }}).listen(8080,function () {    console.log('8080')})